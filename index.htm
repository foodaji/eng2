<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>کمک ناظر</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            direction: rtl;
            text-align: right;
            font-family: Tahoma, sans-serif;
            padding-bottom: 50px;
        }

        .container {
            max-width: 600px;
            margin-top: 20px;
        }

        .project-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }

        .completed-project {
            background-color: #d4edda;
            border-left: 5px solid #28a745;
        }

        .footer {
            text-align: center;
            margin-top: 20px;
            font-size: 12px;
            color: gray;
            position: fixed;
            bottom: 0;
            width: 100%;
            background: white;
            padding: 10px;
            box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        }

        .report-form {
            margin-top: 10px;
            padding: 10px;
            background-color: #f7f7f7;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        textarea {
            width: 100%;
            height: 100px;
            margin-bottom: 10px;
        }

        input {
            width: 100%;
            margin-bottom: 10px;
        }

        button {
            margin: 2px;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(0,0,0,.3);
            border-radius: 50%;
            border-top-color: #000;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .alert-success {
            animation: fadeInOut 3s ease-in-out;
            opacity: 0;
        }

        @keyframes fadeInOut {
            0% { opacity: 0; }
            20% { opacity: 1; }
            80% { opacity: 1; }
            100% { opacity: 0; }
        }

        .search-container {
            margin-bottom: 15px;
        }

        .toggle-btn {
            width: 100%;
            margin-bottom: 10px;
            font-weight: bold;
        }

        .add-project-form {
            display: none;
            margin-bottom: 20px;
        }

        .completed-projects-container {
            display: none;
            margin-bottom: 20px;
        }

        .active-projects-container {
            display: none;
            margin-bottom: 20px;
        }

        .header-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .header-buttons button {
            flex: 1;
        }

        .project-stages {
            margin: 15px 0;
            padding: 10px;
            background: #f0f8ff;
            border-radius: 5px;
        }

        .stage-item {
            display: flex;
            align-items: center;
            margin: 5px 0;
            padding: 5px;
            border-bottom: 1px solid #eee;
        }

        .stage-item.completed {
            color: #28a745;
        }

        .stage-checkbox {
            margin-left: 10px;
            cursor: pointer;
        }

        @media (max-width: 576px) {
            .btn-sm {
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }
            
            .project-card {
                padding: 10px;
            }
            
            h5 {
                font-size: 1rem;
            }
            
            .container {
                padding: 0 10px;
            }
            
            .header-buttons {
                flex-direction: column;
                gap: 5px;
            }
        }
    </style>
</head>
<body>

<div class="container">
    <h2 class="text-center">لیست پروژه‌های تحت نظارت</h2>
    
    <div class="header-buttons">
        <button class="btn btn-primary toggle-btn" onclick="toggleSection('activeProjectsContainer', this)" id="toggleActiveBtn">
            پروژه‌ها
        </button>
        <button class="btn btn-info toggle-btn" onclick="toggleSection('completedProjectsContainer', this)" id="toggleCompletedBtn">
            پروژه‌های تمام شده
        </button>
        <button class="btn btn-success toggle-btn" onclick="toggleSection('addProjectForm', this)" id="toggleAddProjectBtn">
            افزودن پروژه جدید
        </button>
    </div>
    
    <div class="search-container">
        <input type="text" id="searchInput" class="form-control" placeholder="جستجوی پروژه...">
    </div>
    
    <div id="completedProjectsContainer" class="completed-projects-container">
        <div id="completedProjectsList"></div>
    </div>
    
    <div id="activeProjectsContainer" class="active-projects-container">
        <div id="projectsList"></div>
    </div>
    
    <div id="addProjectForm" class="add-project-form card p-3">
        <input type="text" id="projectName" class="form-control my-2" placeholder="نام پروژه *" required>
        <input type="text" id="projectAddress" class="form-control my-2" placeholder="آدرس پروژه">
        <input type="text" id="projectDate" class="form-control my-2" placeholder="تاریخ" value="${getCurrentPersianDate()}">
        <button onclick="addProject()" class="btn btn-success w-100" id="addProjectBtn">
            <span id="addProjectText">➕ افزودن پروژه</span>
            <span id="addProjectLoading" class="loading" style="display: none;"></span>
        </button>
    </div>

    <div id="successAlert" class="alert alert-success mt-2" style="display: none;"></div>
</div>

<footer class="footer">طراحی توسط Hamed Foodaji</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    const API_URL = "https://api.jsonbin.io/v3/b/67a9a0a1e41b4d34e487fdd1";
    const API_KEY = "$2a$10$K0GxG/YDDvwcCOicoQSc3OIPqPpUflP5JvKxVStM6sdQYjq4LdXKi";
    
    // مراحل پروژه
    const PROJECT_STAGES = [
        { id: 'assembly', name: 'همبندی' },
        { id: 'piping', name: 'لوله گذاری' },
        { id: 'wiring', name: 'سیم کشی' },
        { id: 'equipment', name: 'نصب تجهیزات' }
    ];
    
    // تابع برای دریافت تاریخ شمسی فعلی
    function getCurrentPersianDate() {
        const date = new Date();
        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
        return new Intl.DateTimeFormat('fa-IR', options).format(date);
    }
    
    // نمایش پیام موفقیت
    function showSuccessMessage(message) {
        const alertElement = document.getElementById("successAlert");
        alertElement.textContent = message;
        alertElement.style.display = "block";
        alertElement.style.opacity = "1";
        
        setTimeout(() => {
            alertElement.style.opacity = "0";
            setTimeout(() => {
                alertElement.style.display = "none";
            }, 1000);
        }, 2000);
    }
    
    // نمایش/مخفی کردن بخش‌ها
    function toggleSection(sectionId, button) {
        // مخفی کردن تمام بخش‌ها
        document.getElementById('activeProjectsContainer').style.display = 'none';
        document.getElementById('completedProjectsContainer').style.display = 'none';
        document.getElementById('addProjectForm').style.display = 'none';
        
        // بازنشانی رنگ دکمه‌ها
        document.getElementById('toggleActiveBtn').classList.remove('btn-secondary');
        document.getElementById('toggleActiveBtn').classList.add('btn-primary');
        document.getElementById('toggleCompletedBtn').classList.remove('btn-secondary');
        document.getElementById('toggleCompletedBtn').classList.add('btn-info');
        document.getElementById('toggleAddProjectBtn').classList.remove('btn-secondary');
        document.getElementById('toggleAddProjectBtn').classList.add('btn-success');
        
        // نمایش بخش مورد نظر
        const section = document.getElementById(sectionId);
        if (section.style.display === 'block') {
            section.style.display = 'none';
        } else {
            section.style.display = 'block';
            button.classList.remove('btn-primary', 'btn-info', 'btn-success');
            button.classList.add('btn-secondary');
            
            // اگر بخش پروژه‌ها است، نمایش لیست
            if (sectionId === 'activeProjectsContainer' || sectionId === 'completedProjectsContainer') {
                displayProjects();
            }
        }
    }
    
    // جستجوی زنده
    document.getElementById("searchInput").addEventListener("input", function() {
        const searchTerm = this.value.toLowerCase();
        const activeProjects = document.querySelectorAll("#activeProjectsContainer .project-card");
        const completedProjects = document.querySelectorAll("#completedProjectsContainer .project-card");
        
        activeProjects.forEach(card => {
            const projectName = card.querySelector("h5").textContent.toLowerCase();
            card.style.display = projectName.includes(searchTerm) ? "block" : "none";
        });
        
        completedProjects.forEach(card => {
            const projectName = card.querySelector("h5").textContent.toLowerCase();
            card.style.display = projectName.includes(searchTerm) ? "block" : "none";
        });
    });

    async function fetchProjects() {
        try {
            const response = await fetch(API_URL, { headers: { "X-Master-Key": API_KEY } });
            const data = await response.json();
            return data.record.projects || [];
        } catch (error) {
            console.error("خطا در دریافت پروژه‌ها:", error);
            return [];
        }
    }

    async function saveProjects(projects) {
        try {
            const response = await fetch(API_URL, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "X-Master-Key": API_KEY
                },
                body: JSON.stringify({ projects })
            });
            return response.ok;
        } catch (error) {
            console.error("خطا در ذخیره پروژه‌ها:", error);
            return false;
        }
    }

    async function addProject() {
        const name = document.getElementById("projectName").value.trim();
        const address = document.getElementById("projectAddress").value.trim();
        const date = document.getElementById("projectDate").value.trim();
        
        if (!name) {
            alert("نام پروژه را وارد کنید!");
            return;
        }
        
        if (!date) {
            alert("تاریخ را وارد کنید!");
            return;
        }
        
        // نمایش loading
        const addBtn = document.getElementById("addProjectBtn");
        const addText = document.getElementById("addProjectText");
        const loading = document.getElementById("addProjectLoading");
        
        addBtn.disabled = true;
        addText.style.display = "none";
        loading.style.display = "inline-block";
        
        try {
            let projects = await fetchProjects();
            
            // ایجاد مراحل پروژه به صورت پیش‌فرض
            const stages = PROJECT_STAGES.map(stage => ({
                id: stage.id,
                name: stage.name,
                completed: false,
                date: ''
            }));
            
            projects.push({ 
                name, 
                address, 
                date, 
                reports: [], 
                completed: false,
                stages: stages
            });
            
            const success = await saveProjects(projects);
            
            if (success) {
                showSuccessMessage("پروژه با موفقیت اضافه شد");
                document.getElementById("projectName").value = "";
                document.getElementById("projectAddress").value = "";
                document.getElementById("projectDate").value = getCurrentPersianDate();
                await displayProjects();
                toggleSection('activeProjectsContainer', document.getElementById('toggleActiveBtn'));
            } else {
                alert("خطا در ذخیره پروژه");
            }
        } catch (error) {
            console.error("خطا:", error);
            alert("خطا در انجام عملیات");
        } finally {
            addBtn.disabled = false;
            addText.style.display = "inline-block";
            loading.style.display = "none";
        }
    }

    async function deleteProject(index) {
        if (confirm("آیا مطمئن هستید که می‌خواهید این پروژه را حذف کنید؟")) {
            const projectName = document.querySelector(`#project-${index} h5`).textContent;
            
            // نمایش loading
            const originalText = document.querySelector(`#project-${index} .btn-danger`).textContent;
            document.querySelector(`#project-${index} .btn-danger`).innerHTML = '<span class="loading"></span>';
            
            try {
                let projects = await fetchProjects();
                projects.splice(index, 1);
                const success = await saveProjects(projects);
                
                if (success) {
                    showSuccessMessage(`پروژه "${projectName}" حذف شد`);
                    await displayProjects();
                } else {
                    alert("خطا در حذف پروژه");
                }
            } catch (error) {
                console.error("خطا:", error);
                alert("خطا در انجام عملیات");
            } finally {
                document.querySelector(`#project-${index} .btn-danger`).textContent = originalText;
            }
        }
    }

    async function addReport(index) {
        document.getElementById(`reportForm-${index}`).style.display = "block";
        document.getElementById(`reportText-${index}`).focus();
    }

    async function editReport(projectIndex, reportIndex) {
        const reportText = document.querySelector(`#project-${projectIndex} .report-text-${reportIndex}`).innerText;
        const reportDate = document.querySelector(`#project-${projectIndex} .report-date-${reportIndex}`).innerText;
        document.getElementById(`reportForm-${projectIndex}`).style.display = "block";
        document.getElementById(`reportText-${projectIndex}`).value = reportText;
        document.getElementById(`reportDate-${projectIndex}`).value = reportDate;
        document.getElementById(`saveReportBtn-${projectIndex}`).setAttribute("data-action", "edit");
        document.getElementById(`saveReportBtn-${projectIndex}`).setAttribute("data-report-index", reportIndex);
    }

    async function saveReport(projectIndex, action, reportIndex = null) {
        const reportText = document.getElementById(`reportText-${projectIndex}`).value.trim();
        const reportDate = document.getElementById(`reportDate-${projectIndex}`).value.trim();

        if (!reportText) {
            alert("لطفا متن گزارش را وارد کنید.");
            return;
        }
        
        if (!reportDate) {
            alert("لطفا تاریخ گزارش را وارد کنید.");
            return;
        }
        
        // نمایش loading
        const saveBtn = document.getElementById(`saveReportBtn-${projectIndex}`);
        const originalText = saveBtn.textContent;
        saveBtn.innerHTML = '<span class="loading"></span>';
        saveBtn.disabled = true;

        try {
            let projects = await fetchProjects();

            if (action === 'add') {
                projects[projectIndex].reports.push({ date: reportDate, text: reportText });
            } else if (action === 'edit') {
                projects[projectIndex].reports[reportIndex] = { date: reportDate, text: reportText };
            }

            const success = await saveProjects(projects);
            
            if (success) {
                showSuccessMessage(action === 'add' ? "گزارش با موفقیت اضافه شد" : "گزارش با موفقیت ویرایش شد");
                await displayProjects();
            } else {
                alert("خطا در ذخیره گزارش");
            }
        } catch (error) {
            console.error("خطا:", error);
            alert("خطا در انجام عملیات");
        } finally {
            saveBtn.disabled = false;
            saveBtn.textContent = originalText;
            closeReportForm(projectIndex);
        }
    }

    function closeReportForm(projectIndex) {
        document.getElementById(`reportForm-${projectIndex}`).style.display = "none";
    }

    async function toggleStage(projectIndex, stageId) {
        // نمایش loading
        const checkbox = document.querySelector(`#project-${projectIndex} #stage-${stageId}`);
        checkbox.disabled = true;
        checkbox.innerHTML = '<span class="loading"></span>';
        
        try {
            let projects = await fetchProjects();
            const project = projects[projectIndex];
            const stageIndex = project.stages.findIndex(s => s.id === stageId);
            
            if (stageIndex !== -1) {
                project.stages[stageIndex].completed = !project.stages[stageIndex].completed;
                project.stages[stageIndex].date = project.stages[stageIndex].completed ? getCurrentPersianDate() : '';
                
                const success = await saveProjects(projects);
                
                if (success) {
                    showSuccessMessage(`مرحله ${project.stages[stageIndex].name} با موفقیت به‌روزرسانی شد`);
                    await displayProjects();
                } else {
                    alert("خطا در به‌روزرسانی مرحله");
                }
            }
        } catch (error) {
            console.error("خطا:", error);
            alert("خطا در انجام عملیات");
        } finally {
            checkbox.disabled = false;
        }
    }

    async function displayProjects() {
        let projects = await fetchProjects();
        let activeContainer = document.getElementById("projectsList");
        let completedContainer = document.getElementById("completedProjectsList");
        activeContainer.innerHTML = "";
        completedContainer.innerHTML = "";

        projects.forEach((p, index) => {
            let projectItem = document.createElement("div");
            projectItem.className = p.completed ? "project-card completed-project" : "project-card";
            projectItem.id = `project-${index}`;

            let reportsList = p.reports.map((r, reportIndex) => {
                return `
                    <div class="report-item mb-2">
                        <span class="report-date-${reportIndex}">${r.date}:</span>
                        <span class="report-text-${reportIndex}">${r.text}</span>
                        ${!p.completed ? `
                        <button class="btn btn-outline-secondary btn-sm" onclick="editReport(${index}, ${reportIndex})">ویرایش</button>
                        <button class="btn btn-outline-danger btn-sm" onclick="deleteReport(${index}, ${reportIndex})">حذف</button>
                        ` : ''}
                    </div>
                `;
            }).join("");

            // ایجاد لیست مراحل پروژه
            let stagesList = '';
            if (p.stages && p.stages.length > 0) {
                stagesList = '<div class="project-stages"><h6>مراحل پروژه:</h6>';
                p.stages.forEach(stage => {
                    stagesList += `
                        <div class="stage-item ${stage.completed ? 'completed' : ''}">
                            <input type="checkbox" 
                                   id="stage-${stage.id}" 
                                   class="stage-checkbox" 
                                   ${stage.completed ? 'checked' : ''}
                                   ${p.completed ? 'disabled' : ''}
                                   onclick="toggleStage(${index}, '${stage.id}')">
                            <label for="stage-${stage.id}">${stage.name}</label>
                            ${stage.completed ? `<small> (تکمیل شده در ${stage.date})</small>` : ''}
                        </div>
                    `;
                });
                stagesList += '</div>';
            }

            if (p.completed) {
                projectItem.innerHTML = `
                    <h5>${p.name}</h5>
                    <p>${p.address ? p.address : "آدرس ثبت نشده"} | تاریخ شروع: ${p.date}</p>
                    ${stagesList}
                    <div class="reports">${reportsList}</div>
                    <button class="btn btn-warning btn-sm" onclick="toggleProjectStatus(${index})">لغو پایان کار</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteProject(${index})">حذف پروژه</button>
                `;
                completedContainer.appendChild(projectItem);
            } else {
                projectItem.innerHTML = `
                    <h5>${p.name}</h5>
                    <p>${p.address ? p.address : "آدرس ثبت نشده"} | تاریخ شروع: ${p.date}</p>
                    ${stagesList}
                    <button class="btn btn-danger btn-sm" onclick="deleteProject(${index})">❌ حذف</button>
                    <button class="btn btn-primary btn-sm" onclick="addReport(${index})">➕ افزودن گزارش</button>
                    <button class="btn btn-success btn-sm" onclick="toggleProjectStatus(${index})">پایان کار</button>
                    <button class="btn btn-warning btn-sm" onclick="editProject(${index})">ویرایش مشخصات</button>
                    <div class="reports mt-2">${reportsList}</div>
                    
                    <div id="reportForm-${index}" class="report-form" style="display: none;">
                        <textarea id="reportText-${index}" placeholder="متن گزارش را وارد کنید..."></textarea><br>
                        <input type="text" id="reportDate-${index}" value="${getCurrentPersianDate()}" /><br>
                        <button id="saveReportBtn-${index}" class="btn btn-primary btn-sm" onclick="saveReport(${index}, 'add')">ثبت گزارش</button>
                        <button class="btn btn-secondary btn-sm" onclick="closeReportForm(${index})">بستن</button>
                    </div>
                `;
                activeContainer.appendChild(projectItem);
            }
        });
    }

    async function toggleProjectStatus(index) {
        // نمایش loading
        const btn = document.querySelector(`#project-${index} .btn-success, #project-${index} .btn-warning`);
        const originalText = btn.textContent;
        btn.innerHTML = '<span class="loading"></span>';
        btn.disabled = true;

        try {
            let projects = await fetchProjects();
            projects[index].completed = !projects[index].completed;
            const success = await saveProjects(projects);
            
            if (success) {
                showSuccessMessage(projects[index].completed ? "پروژه به لیست پایان یافته‌ها اضافه شد" : "پروژه به لیست فعال بازگشت");
                await displayProjects();
            } else {
                alert("خطا در تغییر وضعیت پروژه");
            }
        } catch (error) {
            console.error("خطا:", error);
            alert("خطا در انجام عملیات");
        } finally {
            btn.disabled = false;
            btn.textContent = originalText;
        }
    }

    async function deleteReport(projectIndex, reportIndex) {
        if (confirm("آیا مطمئن هستید که می‌خواهید این گزارش را حذف کنید؟")) {
            // نمایش loading
            const deleteBtn = document.querySelector(`#project-${projectIndex} .btn-outline-danger`);
            const originalText = deleteBtn.textContent;
            deleteBtn.innerHTML = '<span class="loading"></span>';
            deleteBtn.disabled = true;

            try {
                let projects = await fetchProjects();
                projects[projectIndex].reports.splice(reportIndex, 1);
                const success = await saveProjects(projects);
                
                if (success) {
                    showSuccessMessage("گزارش با موفقیت حذف شد");
                    await displayProjects();
                } else {
                    alert("خطا در حذف گزارش");
                }
            } catch (error) {
                console.error("خطا:", error);
                alert("خطا در انجام عملیات");
            } finally {
                deleteBtn.disabled = false;
                deleteBtn.textContent = originalText;
            }
        }
    }

    async function editProject(index) {
        const projects = await fetchProjects();
        const project = projects[index];
        const newName = prompt("ویرایش نام پروژه:", project.name);
        if (newName === null) return;
        
        const newAddress = prompt("ویرایش آدرس پروژه:", project.address);
        if (newAddress === null) return;

        // نمایش loading
        const editBtn = document.querySelector(`#project-${index} .btn-warning`);
        const originalText = editBtn.textContent;
        editBtn.innerHTML = '<span class="loading"></span>';
        editBtn.disabled = true;

        try {
            project.name = newName;
            project.address = newAddress;
            const success = await saveProjects(projects);
            
            if (success) {
                showSuccessMessage("مشخصات پروژه با موفقیت ویرایش شد");
                await displayProjects();
            } else {
                alert("خطا در ویرایش پروژه");
            }
        } catch (error) {
            console.error("خطا:", error);
            alert("خطا در انجام عملیات");
        } finally {
            editBtn.disabled = false;
            editBtn.textContent = originalText;
        }
    }

    document.addEventListener("DOMContentLoaded", function() {
        // تنظیم تاریخ شمسی فعلی در فرم افزودن پروژه
        document.getElementById("projectDate").value = getCurrentPersianDate();
    });
</script>

</body>
</html>
